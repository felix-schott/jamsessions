services:
  prod_db:
    image: postgis/postgis:16-3.4-alpine
    container_name: jamsessions_prod_db
    volumes: # create schema and roles on startup
      - ./backend/internal/db/schema.sql:/docker-entrypoint-initdb.d/001_schema.sql
      - ./backend/internal/db/scripts/add-roles.sh:/docker-entrypoint-initdb.d/002_roles.sh
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      READ_ONLY_PASSWORD: $READ_ONLY_PASSWORD
      READ_WRITE_PASSWORD: $READ_WRITE_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U read_write -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  prod_api:
    image: ghcr.io/felix-schott/jamsessions-server:latest
    container_name: jamsessions_prod_api
    volumes:
      - "/home/$PROD_USER/migrations:/app/migrations"
    environment:
      DB_URL: "host=prod_db port=5432 user=read_write password=${READ_WRITE_PASSWORD} dbname=${POSTGRES_DB} sslmode=disable"
      MIGRATIONS_DIRECTORY: /app/migrations
      MIGRATIONS_SUGGESTIONS: /app/migrations/suggestions
      SERVER_ADDRESS: 0.0.0.0:80
    depends_on:
      - prod_db
    ports:
      - "127.0.0.1:${PROD_API_PORT}:80"
    healthcheck:
      test: ["CMD", "/app/bin/healthcheck", "http://localhost:80"]
      interval: 1s 
      timeout: 1s
      retries: 3

  prod_frontend:
    build:
      context: frontend
      target: production
    image: jamsessions_prod_frontend
    container_name: jamsessions_prod_frontend
    environment:
      API_ADDRESS: http://localhost:$PROD_API_PORT
    volumes:
      - "node_modules_jamsessions_prod:/workspace/node_modules"
    command: ["--", "--host", "0.0.0.0", "--port", "5173"]
    ports:
      - "127.0.0.1:$PROD_FRONTEND_PORT:5173"
    restart: unless-stopped
    depends_on:
      - prod_api

volumes:
  node_modules_jamsessions_prod: